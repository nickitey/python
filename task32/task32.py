# Имеется файл с данными по успеваемости абитуриентов. Он представляет из себя набор строк, где в каждой строке
# записана следующая информация: Фамилия;Оценка_по_математике;Оценка_по_физике;Оценка_по_русскому_языку Поля внутри
# строки разделены точкой с запятой, оценки — целые числа. Напишите программу, которая считывает исходный файл с
# подобной структурой и для каждого абитуриента записывает его среднюю оценку по трём предметам на отдельной строке,
# соответствующей этому абитуриенту, в файл с ответом. Также вычислите средние баллы по математике, физике и русскому
# языку по всем абитуриентам и добавьте полученные значения, разделённые пробелом, последней строкой в файл с
# ответом. В качестве ответа на задание прикрепите полученный файл со средними оценками по каждому ученику и одной
# строкой со средними оценками по трём предметам.

# Примечание. Для разбиения строки на части по символу ';' можно использовать метод split следующим образом:
# print('First;Second-1 Second-2;Third'.split(';')) ['First',
# 'Second-1 Second-2', 'Third']

# Sample Input:
# Петров;85;92;78
# Сидоров;100;88;94
# Иванов;58;72;85
# Sample Output:
# 85.0
# 94.0
# 71.666666667
# 81.0 84.0 85.666666667

with open(r'dataset_3363_4.txt', 'r', encoding='utf-8') as input_file:
    input_list = []
    for line in input_file:
        line = line.strip().split(';')
        input_list.append(line[1:len(line)])
print(input_list)


def get_average_marks(marks):
    max_stud_mark = 0
    average_subj_marks = []
    average_stud_marks = []
    max_subj_marks = {}
    for student in marks:
        for subject in range(len(student)):
            max_stud_mark += int(student[subject])
            if subject in max_subj_marks:
                max_subj_marks[subject] += int(student[subject])
            else:
                max_subj_marks[subject] = int(student[subject])
        average_stud_marks.append(max_stud_mark / len(student))
        max_stud_mark = 0
    for subject in max_subj_marks:
        average_subj_marks.append(str(max_subj_marks.get(subject) / len(marks)))
    return average_stud_marks, ' '.join(average_subj_marks)


def get_avg_std_mark(marks):
    max_stud_mark = 0
    average_stud_marks = []
    for student in marks:
        for subject in range(len(student)):
            max_stud_mark += int(student[subject])
        average_stud_marks.append(max_stud_mark / len(student))
        max_stud_mark = 0
    return average_stud_marks


def get_avg_subj_mark(marks):
    average_subj_marks = []
    max_subj_marks = {}
    for student in marks:
        for subject in range(len(student)):
            if subject in max_subj_marks:
                max_subj_marks[subject] += int(student[subject])
            else:
                max_subj_marks[subject] = int(student[subject])
    for subject in max_subj_marks:
        average_subj_marks.append(str(max_subj_marks.get(subject) / len(marks)))
    return ' '.join(average_subj_marks)


assert get_avg_std_mark([['85', '92', '78'], ['100', '88', '94'], ['58', '72', '85']]) == [85.0, 94.0, 71.66666666666667]
assert get_avg_subj_mark([['85', '92', '78'], ['100', '88', '94'], ['58', '72', '85']]) == '81.0 84.0 85.66666666666667'
assert get_avg_std_mark(input_list) == [76.0, 64.0, 37.0, 66.0, 59.666666666666664, 48.666666666666664,
                                        49.666666666666664, 55.0, 83.33333333333333, 43.666666666666664,
                                        50.666666666666664, 54.666666666666664, 80.33333333333333, 57.333333333333336,
                                        76.0, 67.66666666666667, 36.666666666666664, 70.33333333333333, 57.0, 57.0,
                                        65.33333333333333, 60.333333333333336, 60.333333333333336, 78.66666666666667,
                                        61.333333333333336, 61.0, 46.0, 66.66666666666667, 66.33333333333333,
                                        61.333333333333336, 49.333333333333336, 62.666666666666664, 51.0,
                                        61.333333333333336, 36.0, 79.66666666666667, 47.666666666666664,
                                        64.33333333333333, 58.0, 64.66666666666667, 65.0, 59.0, 83.0, 59.0, 71.0,
                                        68.33333333333333, 86.66666666666667, 53.0, 50.333333333333336,
                                        69.66666666666667, 63.0, 72.0, 58.666666666666664, 70.33333333333333, 65.0,
                                        39.666666666666664, 77.66666666666667, 75.33333333333333, 89.66666666666667,
                                        70.33333333333333, 68.33333333333333, 75.33333333333333, 61.0,
                                        39.666666666666664, 56.333333333333336, 63.666666666666664, 60.333333333333336,
                                        62.666666666666664, 57.0, 70.66666666666667, 53.333333333333336,
                                        49.666666666666664, 63.0, 80.0, 74.66666666666667, 56.333333333333336,
                                        50.666666666666664, 59.0, 70.66666666666667, 63.333333333333336,
                                        83.33333333333333, 42.333333333333336, 53.333333333333336, 55.333333333333336,
                                        66.33333333333333, 44.666666666666664, 61.333333333333336, 56.0,
                                        56.333333333333336, 38.333333333333336, 86.33333333333333, 53.666666666666664,
                                        69.0, 61.0, 51.333333333333336, 53.333333333333336, 55.333333333333336,
                                        65.66666666666667, 47.333333333333336, 58.333333333333336, 76.0,
                                        92.33333333333333, 72.66666666666667, 88.66666666666667, 73.0,
                                        76.33333333333333, 62.666666666666664, 83.0, 63.0, 60.666666666666664,
                                        59.666666666666664, 58.0, 65.66666666666667, 51.666666666666664,
                                        59.666666666666664, 51.0, 37.0, 58.666666666666664, 76.0, 49.333333333333336,
                                        56.333333333333336, 61.0]
assert get_avg_subj_mark(input_list) == '60.0655737704918 61.959016393442624 64.02459016393442'

print('All tests passed')

with open('result.txt', 'w') as res:
    for string in get_avg_std_mark(input_list):
        res.write(str(string) + '\n')
    res.write(get_avg_subj_mark(input_list))
    